// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// el_mean
List el_mean(arma::rowvec theta, arma::mat x, int maxit, double abstol);
RcppExport SEXP _elmulttest_el_mean(SEXP thetaSEXP, SEXP xSEXP, SEXP maxitSEXP, SEXP abstolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type abstol(abstolSEXP);
    rcpp_result_gen = Rcpp::wrap(el_mean(theta, x, maxit, abstol));
    return rcpp_result_gen;
END_RCPP
}
// test2sample2_cpp
List test2sample2_cpp(NumericVector x, NumericVector y, double b, double alpha, unsigned int maxit, double abstol);
RcppExport SEXP _elmulttest_test2sample2_cpp(SEXP xSEXP, SEXP ySEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP maxitSEXP, SEXP abstolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type abstol(abstolSEXP);
    rcpp_result_gen = Rcpp::wrap(test2sample2_cpp(x, y, b, alpha, maxit, abstol));
    return rcpp_result_gen;
END_RCPP
}
// test2sample777_cpp
List test2sample777_cpp(NumericVector x, NumericVector y, double b, double alpha, unsigned int maxit, double abstol);
RcppExport SEXP _elmulttest_test2sample777_cpp(SEXP xSEXP, SEXP ySEXP, SEXP bSEXP, SEXP alphaSEXP, SEXP maxitSEXP, SEXP abstolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type abstol(abstolSEXP);
    rcpp_result_gen = Rcpp::wrap(test2sample777_cpp(x, y, b, alpha, maxit, abstol));
    return rcpp_result_gen;
END_RCPP
}
// test_pair
List test_pair(const arma::mat& x, const arma::mat& c, const std::vector<int>& pair, int maxit, double abstol);
RcppExport SEXP _elmulttest_test_pair(SEXP xSEXP, SEXP cSEXP, SEXP pairSEXP, SEXP maxitSEXP, SEXP abstolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type pair(pairSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type abstol(abstolSEXP);
    rcpp_result_gen = Rcpp::wrap(test_pair(x, c, pair, maxit, abstol));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_test
List pairwise_test(const arma::mat& x, const arma::mat& c, int maxit, double abstol);
RcppExport SEXP _elmulttest_pairwise_test(SEXP xSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP abstolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type abstol(abstolSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_test(x, c, maxit, abstol));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_threshold
List pairwise_threshold(const arma::mat& x, const arma::mat& c, const int& B, const double& alpha);
RcppExport SEXP _elmulttest_pairwise_threshold(SEXP xSEXP, SEXP cSEXP, SEXP BSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_threshold(x, c, B, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_elmulttest_el_mean", (DL_FUNC) &_elmulttest_el_mean, 4},
    {"_elmulttest_test2sample2_cpp", (DL_FUNC) &_elmulttest_test2sample2_cpp, 6},
    {"_elmulttest_test2sample777_cpp", (DL_FUNC) &_elmulttest_test2sample777_cpp, 6},
    {"_elmulttest_test_pair", (DL_FUNC) &_elmulttest_test_pair, 5},
    {"_elmulttest_pairwise_test", (DL_FUNC) &_elmulttest_pairwise_test, 4},
    {"_elmulttest_pairwise_threshold", (DL_FUNC) &_elmulttest_pairwise_threshold, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_elmulttest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
